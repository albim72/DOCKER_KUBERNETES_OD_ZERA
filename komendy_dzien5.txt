1. uruchomienie aplikacji przy użyciu manifestu wdrożenia: kubectl apply -f deployment.yaml
2. wyszukanie kapsuł zarządzanych przez nowe wdrożenie: kubectl get pods -l app=hello-kiamol-4
3. sprawdzenie wewnętrznego IP kapsuły: kubectl get pod hello-kiamol -o custom-columns=NAME:metadata.name,POD_IP:status.podIP
4. uruchomienie interaktywnej powłoki polceń w kapsule: kubectl exec -it hello-kiamol -- sh
5. Operacje w powłoce:
    -> hostname -i
    -> wget -O - http://localhost | head -n 4

6. wyświetlenie dzienników za pomocą kubernetes: kubectl logs --tail=2 hello-kiamol
7. wyświetlenie dzienników za pomocą docker: docker container logs --tail=2 $(docker container ls -q --filter label=io.kubernetes.container.name=hello-kiamol)
8. wywołanie aplikacji www wewnątrz kontenera kapsuły: kubectl exec deploy/hello-kiamol-4 -- sh -c 'wget -O - http://localhost > /dev/null'
9. sprawdzenie dzienników: kubectl logs --tail=1 -l app=hello-kiamol-4
10. Usuwanie zasobów (podów):
        -> kubectl get pods
        -> usuń wszysktie pody: kubectl delete pods --all
        -> kubectl get pods -> cztery(wszystkie pody zostały usunięte, ale dwa pody zarządzane kontrolerami otrzymały zamienniki)
11. Wpływ usuwania wdrożeń na zawarte w nich kapsuły:
        -> kubectl get deploy
        -> usunięcie wdrożeń: kubectl delete deploy --all
        -> sprawdzenie: kubectl get pods
        -> sprawdzenie wszystkiego w klastrze: kubectl get all

12. wdrożenie dwóch kapsuł i szukanie adresów IP
        -> C:\> cd C:\kiamol\ch03
        -> utóworzenie dwóch wdrożeń: kubectl apply -f sleep/sleep1.yaml -f sleep/sleep2.yaml
        -> sprawdzenie aderesu IP kapsuły 2: kubectl get pod -l app=sleep-2 -o custom-columns=NAME:metadata.name,POD_IP:status.podIP
        -> pingowanie pomiędzy kapsułami: kubectl exec deploy/sleep-1 -- ping -c 4 $(kubectl get pod -l app=sleep-2 -o custom-columns=POD_IP:status.podIP)

13. Zmiana adresu IP poda:
        ->  kubectl get pod -l app=sleep-2 -o custom-columns=NAME:metadata.name,POD_IP:status.podIP
        -> usunięcie poda: kubectl delete pods -l app=sleep-2
        -> sprwadź ponownie adres IP poda (będzie inny)

14. wdrożenie usługi:
        -> wdrożenie usuługi: kubectl apply -f sleep/sleep2-service.yaml
        -> wypisanie informacji na temat usługi: kubectl apply -f sleep/sleep2-service.yaml
        -> sprawdzenie komunikacji: kubectl apply -f sleep/sleep2-service.yaml -> niepowodzenie, gdyż polecenie używa protoołu ICMP niedostępnengo dla Kubernetes

15. deployment aplikacji www oraz api:
        -> tworzenie wdrożeń: kubectl apply -f numbers/api.yaml -f numbers/web.yaml
        -> przekierowanie portu do aplikacji www: kubectl port-forward deploy/numbers-web 8080:80
        -> sprawdzenie: localhost:8080

16. wdrożenie usługi naprawiającej problem:
        -> instalacja serwisu:  kubectl apply -f numbers/api-service.yaml
        -> wyświetlenie serwisu: kubectl get svc numbers-api
        -> przekierowanie portu do aplikacji www: kubectl port-forward deploy/numbers-web 8080:80
        -> sprawdzenie api: kubectl get pod -l app=numbers-api -o custom-columns=NAME:metadata.name,POD_IP:status.podIP
        -> usunięcie kapsuły: kubectl delete pod -l app=numbers-api
        -> ponownie sprawdzenie api oraz przekierowanie do portu aplikacji www

17. Zmienne środowiskowe a wdrożenia:
        -> cd C:\kiamol\ch04 
        -> utworzenie wdrożenia: kubectl apply -f sleep/sleep.yaml  
        -> wyświetlenie zmiennych środowiskowych: kubectl exec deploy/sleep -- printenv HOSTAME KIAMOL_CHAPTER -> wyjście z błędem bo brak minimum jednej zmiennej
        -> redeklaracja wdrożenia: kubectl apply -f sleep/sleep-with-env.yaml
        -> wyświetlenie zmiennych środowiskowych: kubectl exec deploy/sleep -- printenv HOSTAME KIAMOL_CHAPTER -> wyjświetlenie zmiennej KIAMOL_CHAPTER



