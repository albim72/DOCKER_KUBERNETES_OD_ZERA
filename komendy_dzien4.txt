DOCKER SWARM
1. ścieżka: cd C:\diamol\ch13\exercises
2. wdrożenie pliku v1.yml -> docker stack deploy -c ./todo-list/v1.yml todo
3. docker stack ls - wy świetlenie stosów
4. docker service ls - wyświetlenie serwisów
5. wdrożenie pliku v2.yml -> docker stack deploy -c ./todo-list/v2.yml todo
6. wyświetlenie wszystkich replikacji: docker service ps todo_todo-web

APLIAKCJA TENSORFLOW

# Instrukcja użycia Dockera w projekcie TensorFlow

## 1. Budowanie obrazów Dockera
docker build -t tensorflow_train -f Dockerfile.train .
docker build -t tensorflow_predict -f Dockerfile.predict .

## 2. Uruchomienie kontenerów
docker run --rm -v $(pwd):/app tensorflow_train
docker run --rm -v $(pwd):/app tensorflow_predict

## 3. Uruchomienie aplikacji z Docker Compose
docker-compose up --build

## 4. Zatrzymanie i usunięcie kontenerów Docker Compose
docker-compose down

## 5. Inicjalizacja Swarm
docker swarm init

## 6. Wdrożenie usługi w Swarm
docker stack deploy -c swarm-deploy.yml tensorflow_stack

## 7. Sprawdzenie uruchomionych usług w Swarm
docker service ls

## 8. Sprawdzenie uruchomionych kontenerów
docker ps

## 9. Skalowanie usługi predict do 3 replik w Swarm
docker service scale tensorflow_stack_predict=3

## 10. Usunięcie stosu Swarm
docker stack rm tensorflow_stack

## 11. Zatrzymanie Swarm
docker swarm leave --force

KUBERNETES

1. marzędzia klastra Kubernetes: kubectl get nodes
2. uruchomienie kapsuły (pod): kubectl run hello-kiamol --image kiamol/ch02-hello-kiamol --restart=Never
3. oczekiwanie na załadowanie kapsuły: kubectl wait --for condition = Ready pod hello-kiamol
4. wyświetlenie wszystkich kapsuł w klastrze: kubectl get pods
5. szczegółowy opis kapsuły: kubectl describe pod hello-kiamol
6. niestandardowe kolumny danych wyjściowych: kubectl get pod hello-kiamol --output custom-columns=NAME:metadata.name,NODE_IP:status.hostIP,POD_IP:status.podIP
7. wyjście za pomocą jsonpath: kubectl get pod hello-kiamol -o jsonpath = '{.status.containerStatuses[0].containerID}'
8. alternatywnie custom-columns: kubectl get pod hello-kiamol -o custom-columns=CID:status.containerStatuses[0].containerID
9. wyszukanie kontenera kapsuły: docker container ls -q --filter label=io.kubernetes.container.name=hello-kiamol
10. usunięcie kontnera: docker container rm -f $(docker container ls -q --filter label=io.kubernetes.container.name=hello-kiamol)
11. wyświetlenie kapsuł: kubectl get pod hello-kiamol
12. nasłuchiwanie na porcie 8080 i wysłanie ruchu do kapsuły na porcie 80: kubectl port-forward pod/hello-kiamol 8080:80
13. utworzenie nowego wdrożenia: kubectl create deployment hello-kiamol-2 --image kiamol/ch02-hello-kiamol
14. wy świetlenie kapsuł: kubectl get pods
15. etykiety nadane przez wdrożenie: kubectl get deploy hello-kiamol-2 -o jsonpath='{.spec.template.metadata.labels}'
16. wyświetenie listy kapsuł spełniających etykietę: kubectl get pods -l app=hello-kiamol-2
17. wyświetlenie listy wszystkich kapsuł: kubectl get pods -o custom-columns=NAME:metadata.name,LABELS:metadata.labels
18. aktualizacja etykiety app: kubectl label pods -l app=hello-kiamol-2 --overwrite app=hello-kiamol-x
19.ponowne pobranie kapsuły: kubectl get pods -o custom-columns=NAME:metadata.name,LABELS:metadata.labels
20. przywrócenie poprzedniej etykiety: kubectl label pods -l app=hello-kiamol-x --overwrite app=hello-kiamol-2
21. wyświetlenie kapsuł: kubectl get pods -o custom-columns=NAME:metadata.name,LABELS:metadata.labels
22. uruchomienie przekierwoania portów z lokalnej maszyny do wdrożenia: kubectl port-forward deploy/hello-kiamol-2 8080:80
23 -> uruchom w przeglądarce: localhost:8080
24. Tworzenie kapsuł kubernetes za pomocą pliku manifeestu:
  -> wejdź do katalog: cd C:\kiamol\ch02
  -> zbuduj kapsułę na podstawie manifestu: kubectl apply -f pod.yaml
  -> wyświetl kapsuły: kubectl get pods


