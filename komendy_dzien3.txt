1.Projekt Python-Compose
  przygotuj zgodnie z zawartością katalogu PYTHON_COMPOSE
  -> wejdż do katalogu projektu
  -> uruchom: docker-compose up /uruchomi wsztstkie 3 serwisy/
  -> uruchomienie pojedynczego serwisu: docker-compose up data_struct_service
  -> zamknięcie compose:  docker-compose down

2. Wolumeny
  -> uruchamiamy dwa kontenery:
      docker container run --name rn1 diamol/ch06-random-number
      docker container run --name rn2 diamol/ch06-random-number
  -> skopiuj utworzzone pliki - przez każdy z kontenerów na dysk lokalny i porównaj:
      docker container cp rn1:/random/number.txt number1.txt
      docker container cp rn2:/random/number.txt number2.txt
  -> lokowanie danych w kontenerze:
      zmiana zawartości kontenera, w loklanym systemie plików kontenera:
        docker container run --name f1 diamol/ch06-file-display
        echo "http://elonstoneman.com">url.txt
        docker container cp url.txt f1:/input.txt
        docker container start --attach f1
    uruchominie drugiego kontenera (usunięcie pierwszego) - sprawdzenie dostępu do wartstwy zapisu
        docker container run --name f2 diamol/ch06-file-display
        docker container rm -f f1
        docker container cp f1:/input.txt .

  -> towrzenie wolumenu poprzez uruchomienie kontenra z Dockerfile z deklaracją VOLUMEN
      docker container run --name todo2 -d -p 8075:80 diamol/ch06-todo-list
      docker container inspect --format '{{.Mounts}}' todo2
      docker volume ls

  -> powiązanie z volumenem kontenera todo2
      docker container run -d --name t3 --volumes-from todo2 diamol/ch06-todo-list

3. Uruchamianie wielu śrdowisk za pomocą Docker-compose:
  -> ścieżka: cd C:\diamol\ch10\exercises
  -> uruchom compose dla app1:  docker-compose -f ./numbers/docker-compose.yml up -d
  -> uruchom compose dla app2: docker-compose -f ./todo-list/docker-compose.yml up -d
  -> uruchom drugi raz app2: docker-compose -f ./todo-list/docker-compose.yml up -d


  Dwie instancje aplikacji w kontenerze
  -> docker-compose -f ./todo-list/docker-compose.yml -p todo-test up -d
  -> docker compose ls
  -> docker container port todo-test-todo-web-1 80

4. Scalanie wielu wersji aplikacji
  -> usunięcie istniejących kontenerów: docker-container rm -f $(docker container ls -aq)
  -> uruchomienie aplikacji w środowisku programistycznym: docker-compose -f ./numbers/docker-compose.yml -f ./numbers/docker-compose-dev.yml -p numbers-dev up -d
  -> uruchomienie aplikacj w  srodowisku testowym: docker-compose -f ./numbers/docker-compose.yml -f ./numbers/docker-compose-test.yml -p numbers-test up -d
  -> uruchomienie aplikacji w  srodowisku do testów akceptacyjnych: docker-compose -f ./numbers/docker-compose.yml -f ./numbers/docker-compose-uat.yml -p numbers-uat up - d

5. Docker Swarm
  -> uruchomienie: docker swarm init
  -> przydzielenie workera: docker swarm join-token worker
  -> przydzielenie managera: docker swarm join-token manager
  -> sprawdzenie listy klastrow: docker node ls

  tworzenie usługi - używającej jeden kontener aplkacji z DockerHub:
    docker service create --name timecheck --replicas 1 diamol/ch12-timecheck:1.0
    sprawdzenie repliki: docker service ls

  reakcja Swarm na usunięcie repliki usługi
    sprawdzenie repliki: docker service ps timecheck
    uruchomione kontenery: docker container ls
    usunięcie ostatnirgo kontenera (repliki usługi): docker container rm -f $(docker container ls --last 1 -q)
    sprawdzenie usług: docker service ps timecheck





        
